name: Build Application

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

# 更新权限配置
permissions:
  contents: write
  discussions: write
  pull-requests: write
  issues: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14  # macos-14 是 M1/M2 runner
            arch: arm64
            python-version: '3.12'
          - os: windows-latest
            arch: x64
            python-version: '3.12'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.arch }}
        cache: 'pip'
        check-latest: true

    - name: Verify Python installation
      run: |
        python --version
        which python || where python
        python -c "import sys; print(sys.prefix)"
        python -m pip --version

    # 创建必要的文件和目录
    - name: Create necessary files
      shell: bash
      run: |
        # 创建必要目录和文件
        mkdir -p resources assets temp logs
        touch resources/placeholder.txt assets/placeholder.txt
        echo "SILICON_API_KEY=dummy_key" > .env
        
        echo "Directory structure:"
        ls -la

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install pyinstaller

    # macOS M1/M2 特定配置
    - name: Install macOS ARM dependencies
      if: runner.os == 'macOS'
      run: |
        # Homebrew 在 M1/M2 Mac 上的路径是固定的
        BREW_PREFIX="/opt/homebrew"
        echo "Using Homebrew at: $BREW_PREFIX"
        
        # 安装系统依赖
        brew install qt6
        brew install create-dmg
        
        # 设置 Qt 环境变量
        echo "PYTHONPATH=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
        echo "QT_PLUGIN_PATH=$BREW_PREFIX/opt/qt6/plugins" >> $GITHUB_ENV
        echo "QT_QPA_PLATFORM_PATH=$BREW_PREFIX/opt/qt6/plugins/platforms" >> $GITHUB_ENV
        echo "QT_LIBRARY_PATH=$BREW_PREFIX/opt/qt6/lib" >> $GITHUB_ENV
        echo "QT_DEBUG_PLUGINS=1" >> $GITHUB_ENV
        
        # 显示 Qt 安装信息
        brew list qt6 --verbose
        ls -la $BREW_PREFIX/opt/qt6/plugins
        ls -la $BREW_PREFIX/opt/qt6/plugins/platforms
        
        echo "Installed packages:"
        pip list

    # Windows 构建
    - name: Build (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        pyinstaller ^
        --noconsole ^
        --add-data ".env;." ^
        --add-data "assets;assets" ^
        --add-data "resources;resources" ^
        --add-data "ui/styles;ui/styles" ^
        --name "Text2Voice" ^
        --hidden-import PyQt6.QtCore ^
        --hidden-import PyQt6.QtGui ^
        --hidden-import PyQt6.QtWidgets ^
        --hidden-import qt_material ^
        --hidden-import ui.styles ^
        --hidden-import PyQt6.sip ^
        --hidden-import pygame ^
        main.py

    # macOS ARM 构建
    - name: Build (macOS ARM)
      if: runner.os == 'macOS'
      run: |
        # 添加 Qt 相关配置到 spec 文件
        echo "import os" > Text2Voice.spec
        echo "qt_plugin_path = '/opt/homebrew/opt/qt6/plugins'" >> Text2Voice.spec
        echo "qt_lib_path = '/opt/homebrew/opt/qt6/lib'" >> Text2Voice.spec
        
        pyinstaller --noconsole \
          --add-data ".env:." \
          --add-data "assets:assets" \
          --add-data "resources:resources" \
          --add-data "ui/styles:ui/styles" \
          --add-binary "/opt/homebrew/opt/qt6/plugins/platforms/libqcocoa.dylib:PyQt6/Qt6/plugins/platforms/" \
          --add-binary "/opt/homebrew/opt/qt6/plugins/styles/libqmacstyle.dylib:PyQt6/Qt6/plugins/styles/" \
          --name "Text2Voice-ARM" \
          --hidden-import PyQt6.QtCore \
          --hidden-import PyQt6.QtGui \
          --hidden-import PyQt6.QtWidgets \
          --hidden-import qt_material \
          --hidden-import ui.styles \
          --hidden-import PyQt6.sip \
          --hidden-import pygame \
          main.py

        # 验证构建结果
        otool -L "dist/Text2Voice-ARM.app/Contents/MacOS/Text2Voice-ARM"
        ls -R "dist/Text2Voice-ARM.app/Contents/Frameworks/"
        ls -R "dist/Text2Voice-ARM.app/Contents/PlugIns/"

    # 创建 DMG (macOS ARM)
    - name: Create DMG (macOS ARM)
      if: runner.os == 'macOS'
      run: |
        # 确保应用程序可执行
        chmod +x "dist/Text2Voice-ARM.app/Contents/MacOS/Text2Voice-ARM"
        
        # 复制额外的 Qt 插件
        mkdir -p "dist/Text2Voice-ARM.app/Contents/PlugIns/platforms"
        mkdir -p "dist/Text2Voice-ARM.app/Contents/PlugIns/styles"
        cp -f "/opt/homebrew/opt/qt6/plugins/platforms/libqcocoa.dylib" "dist/Text2Voice-ARM.app/Contents/PlugIns/platforms/"
        cp -f "/opt/homebrew/opt/qt6/plugins/styles/libqmacstyle.dylib" "dist/Text2Voice-ARM.app/Contents/PlugIns/styles/"
        
        # 使用 macdeployqt 处理 Qt 依赖
        /opt/homebrew/opt/qt6/bin/macdeployqt "dist/Text2Voice-ARM.app" -verbose=3
        
        create-dmg \
          --volname "Text2Voice" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "Text2Voice-ARM.app" 200 190 \
          --hide-extension "Text2Voice-ARM.app" \
          --app-drop-link 600 185 \
          "Text2Voice-ARM.dmg" \
          "dist/" || exit 1

    # 打包制品
    - name: Zip Artifacts
      shell: bash
      run: |
        cd dist || exit 1
        if [ "${{ runner.os }}" == "Windows" ]; then
          7z a ../Text2Voice-windows-latest.zip ./* || exit 1
        elif [ "${{ runner.os }}" == "macOS" ]; then
          zip -r ../Text2Voice-macos-arm-latest.zip ./* || exit 1
        fi
        cd ..
        
        echo "Created files:"
        ls -lh Text2Voice-*.zip Text2Voice-*.dmg 2>/dev/null || true

    # 上传制品
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Text2Voice-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          Text2Voice-*.zip
          Text2Voice-*.dmg
        compression-level: 9
        retention-days: 90

    # 创建发布
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## Text2Voice ${{ github.ref_name }}
          
          ### 构建信息
          - 版本: ${{ github.ref_name }}
          - 时间: ${{ github.event.head_commit.timestamp }}
          - 提交: ${{ github.event.head_commit.message }}
          
          ### 下载
          - Windows 版本: Text2Voice-windows-latest.zip
          - macOS ARM (M1/M2) 版本: Text2Voice-macos-arm-latest.zip
          - macOS ARM DMG: Text2Voice-ARM.dmg
          
        files: |
          Text2Voice-windows-latest.zip
          Text2Voice-macos-arm-latest.zip
          Text2Voice-ARM.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 构建完成通知
    - name: Build Status
      if: always()
      run: |
        echo "Build completed for ${{ runner.os }}"
        echo "Status: ${{ job.status }}" 