name: Build Application

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

# 更新权限配置
permissions:
  contents: write
  discussions: write
  pull-requests: write
  issues: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # 一个平台失败不影响其他平台
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.12']  # 更新到 Python 3.12

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整的历史记录用于版本信息
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'
        cache: 'pip'
        check-latest: true  # 确保使用最新的补丁版本

    - name: Verify Python installation
      run: |
        python --version
        which python
        python -c "import sys; print(sys.prefix)"
        python -m pip --version

    # 创建必要的文件和目录
    - name: Create necessary files and directories
      shell: bash
      run: |
        # 创建 .env 文件
        if [ ! -f ".env" ]; then
          echo "Creating .env file..."
          echo "SILICON_API_KEY=dummy_key" > .env
        fi
        
        # 创建必要目录
        for dir in "assets" "temp" "logs" "resources"; do
          if [ ! -d "$dir" ]; then
            echo "Creating $dir directory..."
            mkdir -p "$dir"
          fi
        done
        
        # 显示目录结构
        echo "Directory structure:"
        ls -la
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    # macOS 特定配置
    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        # 安装系统依赖
        brew install gettext
        brew link gettext --force
        brew install qt6
        
        # 验证 gettext 安装
        echo "Checking gettext installation..."
        ls -l /usr/local/opt/gettext/lib/
        otool -L /usr/local/opt/gettext/lib/libintl*.dylib
        
        # 设置环境变量
        echo "Setting up environment variables..."
        echo "LDFLAGS=-L/usr/local/opt/gettext/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/usr/local/opt/gettext/include" >> $GITHUB_ENV
        
        # 安装 Python 依赖
        echo "Installing Python dependencies..."
        python -m pip install --upgrade pip setuptools wheel
        
        # 安装 PyQt6
        python -m pip install PyQt6>=6.4.2
        python -m pip install PyQt6-Qt6>=6.4.2
        python -m pip install PyQt6-sip>=13.4.1
        
        # 安装 pygame
        python -m pip install pygame>=2.5.2
        
        echo "Installed packages:"
        pip list

    - name: Set macOS environment
      if: runner.os == 'macOS'
      run: |
        echo "QT_DEBUG_PLUGINS=1" >> $GITHUB_ENV
        echo "PYTHONPATH=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=/usr/local/opt/gettext/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
        
    # Windows 构建
    - name: Build (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        # 检查目录结构
        dir
        
        # 确保必要目录存在
        if not exist "resources" mkdir resources
        if not exist "assets" mkdir assets
        if not exist "temp" mkdir temp
        if not exist "logs" mkdir logs
        
        # 创建一个空的资源文件，确保目录不为空
        echo. > resources\placeholder.txt
        echo. > assets\placeholder.txt
        
        # 显示目录结构
        echo "Directory structure after creation:"
        dir /s
        
        # 执行构建
        pyinstaller ^
        --noconsole ^
        --add-data ".env;." ^
        --add-data "assets;assets" ^
        --add-data "resources;resources" ^
        --add-data "ui/styles;ui/styles" ^
        --name "Text2Voice" ^
        --hidden-import PyQt6.QtCore ^
        --hidden-import PyQt6.QtGui ^
        --hidden-import PyQt6.QtWidgets ^
        --hidden-import qt_material ^
        --hidden-import ui.styles ^
        --hidden-import PyQt6.sip ^
        --hidden-import pygame ^
        main.py

    # macOS 构建
    - name: Build (macOS)
      if: runner.os == 'macOS'
      run: |
        # 检查目录结构
        ls -la
        
        # 确保必要目录存在
        mkdir -p resources assets temp logs
        
        # 创建占位文件
        touch resources/placeholder.txt
        touch assets/placeholder.txt
        
        # 显示目录结构
        echo "Directory structure after creation:"
        find . -type d
        
        # 执行构建
        pyinstaller --noconsole \
          --add-data ".env:." \
          --add-data "assets:assets" \
          --add-data "resources:resources" \
          --add-data "ui/styles:ui/styles" \
          --name "Text2Voice-Intel" \
          --hidden-import PyQt6.QtCore \
          --hidden-import PyQt6.QtGui \
          --hidden-import PyQt6.QtWidgets \
          --hidden-import qt_material \
          --hidden-import ui.styles \
          --hidden-import PyQt6.sip \
          --hidden-import pygame \
          main.py

    # 创建 DMG (macOS)
    - name: Create DMG (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install create-dmg || exit 1
        
        # 确保执行权限
        chmod +x "dist/Text2Voice-Intel.app/Contents/MacOS/Text2Voice-Intel"
        
        # 添加错误处理
        if ! create-dmg \
          --volname "Text2Voice" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "Text2Voice-Intel.app" 200 190 \
          --hide-extension "Text2Voice-Intel.app" \
          --app-drop-link 600 185 \
          "Text2Voice-Intel.dmg" \
          "dist/"; then
          echo "DMG creation failed"
          exit 1
        fi

    # 打包制品
    - name: Zip Artifacts
      shell: bash
      run: |
        echo "Creating zip archives..."
        cd dist || exit 1
        
        if [ "${{ runner.os }}" == "Windows" ]; then
          7z a ../Text2Voice-windows-latest.zip ./* || exit 1
          echo "Windows zip created successfully"
        elif [ "${{ runner.os }}" == "macOS" ]; then
          zip -r ../Text2Voice-macos-intel-latest.zip ./* || exit 1
          echo "macOS zip created successfully"
        fi
        
        cd ..
        
        # 显示创建的文件
        echo "Created files:"
        ls -lh Text2Voice-*.zip Text2Voice-*.dmg 2>/dev/null || true

    # 上传制品
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Text2Voice-${{ runner.os }}
        path: |
          Text2Voice-*.zip
          Text2Voice-*.dmg
        compression-level: 9
        retention-days: 90

    # 创建发布
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## Text2Voice ${{ github.ref_name }}
          
          ### 构建信息
          - 版本: ${{ github.ref_name }}
          - 时间: ${{ github.event.head_commit.timestamp }}
          - 提交: ${{ github.event.head_commit.message }}
          - 分支: ${{ github.ref_name }}
          
          ### 下载
          - Windows 版本: Text2Voice-windows-latest.zip
          - macOS Intel 版本: Text2Voice-macos-intel-latest.zip
          - DMG 安装包: Text2Voice-Intel.dmg
          
          ### 更新说明
          {{ 请在此处添加版本更新说明 }}
          
        files: |
          Text2Voice-windows-latest.zip
          Text2Voice-macos-intel-latest.zip
          Text2Voice-*.dmg
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 构建完成通知
    - name: Build Status
      if: always()
      run: |
        echo "Build completed for ${{ runner.os }}"
        echo "Status: ${{ job.status }}" 